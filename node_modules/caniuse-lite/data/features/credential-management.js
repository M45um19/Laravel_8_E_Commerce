sertionMessage(new Buffer([1, 2, 3]), '<Buffer 01 02 03>');
      if (typeof global.Uint8Array === 'function' && Object.getOwnPropertyNames( new Uint8Array([])).length === 0) {
        // todo fix util.inspect
        testAssertionMessage(new Uint8Array([1, 2, 3]), '{ \'0\': 1, \'1\': 2, \'2\': 3 }');
      }
      testAssertionMessage(/a/, '/a/');
      testAssertionMessage(function f() {}, '[Function: f]');
      testAssertionMessage({}, '{}');
      testAssertionMessage({a: undefined, b: null}, '{ a: undefined, b: null }');
      testAssertionMessage({a: NaN, b: Infinity, c: -Infinity},
          '{ a: NaN, b: Infinity, c: -Infinity }');
    });

    test('assert - regressions from node.js testcase', function () {
      var threw = false;

      try {
        assert.throws(function () {
          assert.ifError(null);
        });
      } catch (e) {
        threw = true;
        assert.equal(e.message, 'Missing expected exception..');
      }
      assert.ok(threw);

      try {
        assert.equal(1, 2);
      } catch (e) {
        assert.equal(e.toString().split('\n')[0], 'AssertionError: 1 == 2');
    